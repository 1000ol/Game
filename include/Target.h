/*#include "GameElement.h"
#include "Player.h"

#ifndef TARGET_H
#define TARGET_H

using namespace gameEngine;

class Target : public gameEngine::GameElement, public std::enable_shared_from_this<Target>
{
public:
  static std::shared_ptr<Target> getInstance(int x, int y, int w, int h, const char *imgSrc);
  Target(int x, int y, int w, int h, const char *imgSrc);

  void tick();
  void vanish();

  ~Target();

private:
  int pace = 0;
};

extern std::shared_ptr<Player> player;

#endif
*/

/*
#include "GameElement.h"
#include "Player.h"

#ifndef TARGET_H
#define TARGET_H

using namespace gameEngine;

class Target : public gameEngine::GameElement, public std::enable_shared_from_this<Target>
{
public:
  static std::shared_ptr<Target> getInstance(int x, int y, int w, int h, const char *imgSrc) {
     return std::make_shared<Target>(x, y, w, h, imgSrc);
  };

  Target(int x, int y, int w, int h, const char *imgSrc) : GameElement(x, y, w, h, imgSrc) {
    setAutogenerated();
    SDL_Surface *surf = IMG_Load(getImageSource());
    setTexture(SDL_CreateTextureFromSurface(sys.getRen(), surf));
    SDL_FreeSurface(surf);
  };

  void tick() {
    pace++;
    if (pace % 5 == 0)
    {
        int newY = getRect().y + 10;
        setCoordinateY(newY);
    }
  };

  void vanish(){
    SDL_Rect r = getRect();
    setWidth(r.w - r.w);
    setHeight(r.h - r.h);
    setCoordinateX(r.x + 1.5);
    setCoordinateY(r.y + 8);
  }

  ~Target();

private:
  int pace = 0;
};

extern std::shared_ptr<Player> player;

#endif

*/
