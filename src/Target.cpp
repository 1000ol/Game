#include "Target.h"
#include "System.h"

#include <iostream>


    // Säkerställer att objekt endast kan instantieras via privat konstruktor och hämtas som pekarobjekt
    std::shared_ptr<Target>Target::getInstance(int x, int y, int w, int h, const char *imgSrc)
    {
        return std::make_shared<Target>(x, y, w, h, imgSrc);
    }
    // Konstruktor
    Target::Target(int x, int y, int w, int h, const char *imgSrc) : GameElement(x, y, w, h, imgSrc)
    {
        setAutogenerated();
        SDL_Surface *surf = IMG_Load(imageSource);
        setTexture(SDL_CreateTextureFromSurface(sys.getRen(), surf));
        SDL_FreeSurface(surf);
    }

    void Target::tick() {
        if (isInsideWindow()) {
            pace++;
            if (pace % 10 == 0) {
                int newY = getRect().y + 5;
                setCoordinateY(newY);
            }
        } 
        else 
            sys.getSession()->removeGameElement(shared_from_this());
    }

    void Target::collide() {
        SDL_Rect r = getRect();
        setWidth(r.w-5);
        setHeight(r.h-5);
		setCoordinateX(r.x+2.5);
		setCoordinateY(r.y + 5);
    }
    