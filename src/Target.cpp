/*#include "Target.h"
#include "System.h"

#include <iostream>

// Säkerställer att objekt endast kan instantieras via privat konstruktor och hämtas som pekarobjekt
std::shared_ptr<Target> Target::getInstance(int x, int y, int w, int h, const char *imgSrc)
{
    return std::make_shared<Target>(x, y, w, h, imgSrc);
}
// Konstruktor
Target::Target(int x, int y, int w, int h, const char *imgSrc) : GameElement(x, y, w, h, imgSrc)
{
    setAutogenerated();
    SDL_Surface *surf = IMG_Load(getImageSource());
    setTexture(SDL_CreateTextureFromSurface(sys.getRen(), surf));
    SDL_FreeSurface(surf);
}

void Target::tick()
{
    pace++;
    if (pace % 5 == 0)
    {
        int newY = getRect().y + 10;
        setCoordinateY(newY);
    }
}
void Target::vanish()
{
    SDL_Rect r = getRect();
    // if (player->getRect().y / 2 != getRect().y)
    //{
    setWidth(r.w - r.w);
    setHeight(r.h - r.h);
    setCoordinateX(r.x + 1.5);
    setCoordinateY(r.y + 8);
    //}
    // else
    //{
    // setCoordinateY(r.y + 100);
    //}
}

Target::~Target()
{
    std::cout << "Target::~Target()" << std::endl;
}
*/